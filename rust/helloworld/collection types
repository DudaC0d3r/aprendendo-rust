Em Rust, "collection types" (tipos de coleÃ§Ãµes) sÃ£o estruturas fornecidas pela *standard library* que permitem armazenar e manipular mÃºltiplos valores de forma eficiente. Eles sÃ£o similares a listas, arrays, mapas e conjuntos em outras linguagens.

Aqui vÃ£o os principais tipos de coleÃ§Ãµes em Rust:

---

### ğŸ“¦ 1. **`Vec<T>` â€“ Vetor**
- Lista dinÃ¢mica.
- Pode crescer e diminuir de tamanho.
- Acessa elementos por Ã­ndice.
- Muito usada!

```rust
let mut v = Vec::new();
v.push(1);
v.push(2);
println!("{:?}", v); // [1, 2]
```

---

### ğŸ“¦ 2. **`String`**
- Uma coleÃ§Ã£o de caracteres (na verdade, bytes UTF-8).
- Ã‰ basicamente um `Vec<u8>` com regras especÃ­ficas pra texto.

```rust
let mut s = String::from("OlÃ¡");
s.push_str(" mundo!");
```

---

### ğŸ“¦ 3. **`HashMap<K, V>`**
- Mapa (dicionÃ¡rio) que associa chaves a valores.
- Requer que as chaves implementem `Eq` e `Hash`.

```rust
use std::collections::HashMap;

let mut map = HashMap::new();
map.insert("chave", 42);
println!("{:?}", map.get("chave")); // Some(42)
```

---

### ğŸ“¦ 4. **`HashSet<T>`**
- Conjunto: coleÃ§Ã£o de itens Ãºnicos (sem repetiÃ§Ã£o).
- Baseado em `HashMap`.

```rust
use std::collections::HashSet;

let mut set = HashSet::new();
set.insert("item1");
set.insert("item2");
```

---

### ğŸ“¦ 5. **`VecDeque<T>`**
- Fila de duas pontas.
- Permite inserÃ§Ã£o/remoÃ§Ã£o eficiente no comeÃ§o e no fim.

```rust
use std::collections::VecDeque;

let mut deque = VecDeque::new();
deque.push_back(1);
deque.push_front(2);
```

---

### ğŸ“¦ 6. **`BTreeMap<K, V>` e `BTreeSet<T>`**
- VersÃµes ordenadas de `HashMap` e `HashSet`, com base em Ã¡rvore binÃ¡ria balanceada.
- MantÃªm os elementos ordenados.

---

Essas coleÃ§Ãµes vivem no mÃ³dulo:

```rust
use std::collections;
```

---

Se quiser, posso te mostrar exemplos prÃ¡ticos de uso ou comparar com alguma linguagem que vocÃª jÃ¡ conhece. Quer seguir por aÃ­?
